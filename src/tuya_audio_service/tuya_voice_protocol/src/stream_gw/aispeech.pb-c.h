/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: aispeech.proto */

#ifndef PROTOBUF_C_aispeech_2eproto__INCLUDED
#define PROTOBUF_C_aispeech_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Speech__Request Speech__Request;
typedef struct Speech__Request__OptionsEntry Speech__Request__OptionsEntry;
typedef struct Speech__Response Speech__Response;
typedef struct Speech__Result Speech__Result;
typedef struct Speech__Nlu Speech__Nlu;
typedef struct Speech__Slot Speech__Slot;
typedef struct Speech__Skill Speech__Skill;


/* --- enums --- */


/* --- messages --- */

struct  Speech__Request__OptionsEntry
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define SPEECH__REQUEST__OPTIONS_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&speech__request__options_entry__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  Speech__Request
{
  ProtobufCMessage base;
  /*
   * Request ID
   */
  char *requestid;
  /*
   * Session ID
   */
  char *sessionid;
  /*
   * Request type
   */
  char *type;
  /*
   * Home ID (required for app entry)
   */
  int64_t homeid;
  /*
   * Audio file block or ASR/TTS text
   */
  ProtobufCBinaryData block;
  /*
   * Extended information
   */
  size_t n_options;
  Speech__Request__OptionsEntry **options;
};
#define SPEECH__REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&speech__request__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, {0,NULL}, 0,NULL }


struct  Speech__Response
{
  ProtobufCMessage base;
  /*
   * Response code
   */
  char *code;
  /*
   * Response description
   */
  char *message;
  /*
   * Request ID
   */
  char *requestid;
  /*
   * Response result
   */
  Speech__Result *data;
  /*
   * Whether the response is completely finished
   */
  protobuf_c_boolean end;
};
#define SPEECH__RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&speech__response__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, 0 }


struct  Speech__Result
{
  ProtobufCMessage base;
  /*
   * Response type
   */
  char *type;
  /*
   * Session ID
   */
  char *sessionid;
  /*
   * Whether to keep the session
   */
  protobuf_c_boolean keepsession;
  /*
   * ASR recognition result
   */
  char *asr;
  /*
   * TTS broadcast text
   */
  char *nlg;
  /*
   * TTS audio file block
   */
  ProtobufCBinaryData block;
  /*
   * NLU intent information
   */
  Speech__Nlu *nlu;
  /*
   * Skill information
   */
  Speech__Skill *skill;
};
#define SPEECH__RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&speech__result__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL}, NULL, NULL }


struct  Speech__Nlu
{
  ProtobufCMessage base;
  /*
   * Domain name
   */
  char *domain;
  /*
   * Intent name
   */
  char *intent;
  /*
   * Slot list
   */
  size_t n_slot;
  Speech__Slot **slot;
};
#define SPEECH__NLU__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&speech__nlu__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL }


struct  Speech__Slot
{
  ProtobufCMessage base;
  /*
   * Slot name
   */
  char *name;
  /*
   * Slot type
   */
  char *type;
  /*
   * Slot value
   */
  char *value;
};
#define SPEECH__SLOT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&speech__slot__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Basically consistent with message 501
 */
struct  Speech__Skill
{
  ProtobufCMessage base;
  /*
   * Skill name
   */
  char *name;
  /*
   * Skill result type
   */
  char *type;
  /*
   * Skill result data in JSON format
   */
  char *data;
};
#define SPEECH__SKILL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&speech__skill__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/* Speech__Request__OptionsEntry methods */
void   speech__request__options_entry__init
                     (Speech__Request__OptionsEntry         *message);
/* Speech__Request methods */
void   speech__request__init
                     (Speech__Request         *message);
size_t speech__request__get_packed_size
                     (const Speech__Request   *message);
size_t speech__request__pack
                     (const Speech__Request   *message,
                      uint8_t             *out);
size_t speech__request__pack_to_buffer
                     (const Speech__Request   *message,
                      ProtobufCBuffer     *buffer);
Speech__Request *
       speech__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   speech__request__free_unpacked
                     (Speech__Request *message,
                      ProtobufCAllocator *allocator);
/* Speech__Response methods */
void   speech__response__init
                     (Speech__Response         *message);
size_t speech__response__get_packed_size
                     (const Speech__Response   *message);
size_t speech__response__pack
                     (const Speech__Response   *message,
                      uint8_t             *out);
size_t speech__response__pack_to_buffer
                     (const Speech__Response   *message,
                      ProtobufCBuffer     *buffer);
Speech__Response *
       speech__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   speech__response__free_unpacked
                     (Speech__Response *message,
                      ProtobufCAllocator *allocator);
/* Speech__Result methods */
void   speech__result__init
                     (Speech__Result         *message);
size_t speech__result__get_packed_size
                     (const Speech__Result   *message);
size_t speech__result__pack
                     (const Speech__Result   *message,
                      uint8_t             *out);
size_t speech__result__pack_to_buffer
                     (const Speech__Result   *message,
                      ProtobufCBuffer     *buffer);
Speech__Result *
       speech__result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   speech__result__free_unpacked
                     (Speech__Result *message,
                      ProtobufCAllocator *allocator);
/* Speech__Nlu methods */
void   speech__nlu__init
                     (Speech__Nlu         *message);
size_t speech__nlu__get_packed_size
                     (const Speech__Nlu   *message);
size_t speech__nlu__pack
                     (const Speech__Nlu   *message,
                      uint8_t             *out);
size_t speech__nlu__pack_to_buffer
                     (const Speech__Nlu   *message,
                      ProtobufCBuffer     *buffer);
Speech__Nlu *
       speech__nlu__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   speech__nlu__free_unpacked
                     (Speech__Nlu *message,
                      ProtobufCAllocator *allocator);
/* Speech__Slot methods */
void   speech__slot__init
                     (Speech__Slot         *message);
size_t speech__slot__get_packed_size
                     (const Speech__Slot   *message);
size_t speech__slot__pack
                     (const Speech__Slot   *message,
                      uint8_t             *out);
size_t speech__slot__pack_to_buffer
                     (const Speech__Slot   *message,
                      ProtobufCBuffer     *buffer);
Speech__Slot *
       speech__slot__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   speech__slot__free_unpacked
                     (Speech__Slot *message,
                      ProtobufCAllocator *allocator);
/* Speech__Skill methods */
void   speech__skill__init
                     (Speech__Skill         *message);
size_t speech__skill__get_packed_size
                     (const Speech__Skill   *message);
size_t speech__skill__pack
                     (const Speech__Skill   *message,
                      uint8_t             *out);
size_t speech__skill__pack_to_buffer
                     (const Speech__Skill   *message,
                      ProtobufCBuffer     *buffer);
Speech__Skill *
       speech__skill__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   speech__skill__free_unpacked
                     (Speech__Skill *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Speech__Request__OptionsEntry_Closure)
                 (const Speech__Request__OptionsEntry *message,
                  void *closure_data);
typedef void (*Speech__Request_Closure)
                 (const Speech__Request *message,
                  void *closure_data);
typedef void (*Speech__Response_Closure)
                 (const Speech__Response *message,
                  void *closure_data);
typedef void (*Speech__Result_Closure)
                 (const Speech__Result *message,
                  void *closure_data);
typedef void (*Speech__Nlu_Closure)
                 (const Speech__Nlu *message,
                  void *closure_data);
typedef void (*Speech__Slot_Closure)
                 (const Speech__Slot *message,
                  void *closure_data);
typedef void (*Speech__Skill_Closure)
                 (const Speech__Skill *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor speech__request__descriptor;
extern const ProtobufCMessageDescriptor speech__request__options_entry__descriptor;
extern const ProtobufCMessageDescriptor speech__response__descriptor;
extern const ProtobufCMessageDescriptor speech__result__descriptor;
extern const ProtobufCMessageDescriptor speech__nlu__descriptor;
extern const ProtobufCMessageDescriptor speech__slot__descriptor;
extern const ProtobufCMessageDescriptor speech__skill__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_aispeech_2eproto__INCLUDED */
